package code.shubham.dynamicprogramming;

import code.shubham.trees.TreeNode;

public class MaxSumPathInBinaryTree {
    public class Solution {
        private int result = Integer.MIN_VALUE;
        public int maxPathSum(TreeNode A) {
            maxPathSumRecursive (A);
            return result;
        }

        private int maxPathSumRecursive (TreeNode A) {
            if (A == null) return 0;
            int l = maxPathSumRecursive (A.left);
            int r = maxPathSumRecursive (A.right);
            int current = Math.max(A.val, Math.max(l + A.val, r + A.val));
            result = Math.max(result, Math.max(current, A.val + l + r));
            return current;
        }

    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode (1);
        root.left     = new TreeNode (2);
        root.right    = new TreeNode (3);
//        String line = "863 64 217 343 207 391 145 304 248 80 389 225 86 168 233 56 349 114 223 284 269 57 71 334 149 4 411 399 279 87 352 52 -1 -1 105 78 427 181 250 297 344 221 51 166 111 378 374 266 -1 296 28 59 424 44 193 160 229 318 -1 242 406 -1 328 175 199 48 342 408 -1 368 -1 116 25 -1 47 338 215 50 231 -1 262 189 -1 153 -1 340 -1 277 -1 -1 -1 41 -1 -1 197 10 224 326 120 108 414 228 316 310 117 109 367 91 119 8 -1 -1 -1 -1 382 -1 -1 -1 361 332 -1 -1 118 425 -1 205 -1 -1 423 150 134 -1 182 131 327 -1 337 325 386 173 196 291 -1 365 32 247 -1 -1 -1 -1 -1 -1 130 419 187 219 -1 -1 180 177 66 420 285 161 37 76 303 154 377 -1 353 -1 366 370 309 -1 170 272 -1 -1 -1 -1 333 431 -1 317 -1 -1 206 292 -1 192 -1 -1 -1 -1 -1 39 -1 -1 -1 -1 -1 -1 396 357 259 300 -1 240 -1 -1 265 -1 330 335 195 256 -1 428 -1 -1 -1 -1 -1 -1 -1 -1 77 -1 410 204 -1 -1 99 360 320 62 324 -1 163 415 -1 -1 214 141 421 -1 90 -1 283 143 354 17 110 218 19 75 -1 351 36 167 191 244 429 174 404 123 74 294 165 -1 79 275 67 -1 381 243 267 -1 -1 -1 -1 394 413 -1 -1 230 -1 213 176 22 -1 -1 -1 83 -1 -1 -1 -1 409 -1 358 -1 398 7 157 -1 255 -1 -1 -1 373 323 -1 346 282 234 222 26 54 270 49 -1 -1 200 -1 302 -1 -1 -1 138 -1 290 -1 -1 -1 -1 339 314 216 124 -1 171 274 13 308 -1 376 315 70 403 355 137 388 142 383 31 -1 260 92 58 30 281 159 209 251 407 -1 23 144 43 -1 94 132 -1 -1 295 -1 -1 241 306 245 -1 -1 179 -1 -1 -1 98 -1 249 -1 -1 -1 -1 -1 136 -1 -1 -1 -1 -1 -1 106 -1 307 -1 -1 -1 -1 -1 -1 -1 169 -1 -1 -1 372 -1 -1 -1 299 -1 112 -1 287 115 -1 -1 -1 -1 -1 -1 53 -1 16 -1 -1 -1 125 278 253 401 -1 18 384 201 183 188 400 20 276 402 122 -1 -1 198 -1 -1 203 254 -1 63 -1 208 -1 258 178 -1 129 246 34 393 235 220 -1 -1 151 -1 185 100 -1 286 -1 416 88 190 -1 -1 -1 -1 369 103 341 -1 1 162 82 133 -1 -1 35 -1 9 -1 -1 -1 11 107 29 -1 -1 -1 -1 68 -1 412 -1 405 128 -1 -1 -1 -1 -1 -1 -1 417 -1 311 418 -1 -1 -1 -1 -1 12 -1 -1 322 226 93 263 359 38 126 73 -1 312 -1 -1 -1 -1 2 -1 -1 329 127 211 -1 60 -1 -1 172 -1 -1 -1 -1 -1 -1 5 -1 -1 140 -1 395 -1 -1 -1 84 15 -1 -1 -1 155 -1 257 264 -1 -1 148 95 -1 -1 -1 14 380 350 -1 -1 -1 -1 375 -1 -1 371 -1 -1 65 89 298 -1 -1 236 -1 -1 184 102 158 72 -1 -1 -1 -1 -1 305 -1 -1 46 293 -1 101 -1 -1 -1 -1 362 -1 -1 -1 104 -1 -1 -1 -1 -1 348 -1 186 -1 -1 -1 -1 321 113 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 390 364 -1 268 -1 -1 -1 331 -1 -1 -1 -1 -1 -1 319 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 69 239 -1 -1 152 135 -1 -1 -1 -1 55 -1 -1 202 261 96 -1 -1 -1 -1 6 -1 301 -1 -1 -1 -1 -1 -1 363 -1 -1 -1 -1 -1 -1 -1 -1 -1 238 252 97 -1 -1 -1 -1 392 -1 -1 -1 288 -1 -1 -1 271 -1 -1 -1 -1 -1 422 -1 -1 -1 212 -1 387 24 3 -1 -1 -1 21 40 -1 -1 -1 -1 273 139 -1 -1 -1 -1 237 61 -1 -1 81 -1 -1 -1 -1 -1 147 347 227 -1 -1 33 -1 385 -1 121 -1 -1 -1 -1 289 -1 397 -1 426 -1 -1 -1 -1 -1 -1 -1 -1 232 -1 280 356 164 -1 -1 45 336 -1 146 -1 -1 -1 -1 -1 -1 379 430 194 -1 -1 313 42 85 210 345 27 -1 -1 -1 -1 -1 156 -1 -1 -1 -1 -1 -1 -1 -1 -1";
//        TreeNode root = TreeUtils.getTreeFromLevelOrder(ArrayUtils.getIntArray(line));
//        TreeNode root = new TreeNode(10);
//        root.left = new TreeNode(2);
//        root.right = new TreeNode(10);
//        root.left.left = new TreeNode(20);
//        root.left.right = new TreeNode(1);
//        root.right.right = new TreeNode(-25);
//        root.right.right.left = new TreeNode(3);
//        root.right.right.right = new TreeNode(4);
        Solution s    = new MaxSumPathInBinaryTree().new Solution();
        s.maxPathSum(root);
        System.out.println(s.result);
    }
}

